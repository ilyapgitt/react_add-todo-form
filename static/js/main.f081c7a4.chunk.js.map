{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","findUser","usersFromServer","find","cn","TodoList","props","todos","map","App","useState","todosFromServer","setTodos","setTitle","isTitleError","setIsTitleError","selectedUser","setSelectedUser","isSelectedUserError","setIsSelectedUserError","action","method","onSubmit","event","preventDefault","newTodo","Math","max","currentTodo","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f081c7a4.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types';\n\nexport interface PropsUser {\n  user: User;\n}\n\nexport const UserInfo: React.FC<PropsUser> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todos } from '../../types';\nimport usersFromServer from '../../api/users';\nimport { UserInfo } from '../UserInfo';\n\ninterface PropsTodos {\n  todo: Todos;\n}\n\nexport const TodoInfo: React.FC<PropsTodos> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const findUser = usersFromServer.find(user => user.id === userId) || null;\n\n  return (\n    <>\n      <article\n        data-id={id}\n        className={cn('TodoInfo', {\n          'TodoInfo--completed': completed,\n        })}\n\n      >\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {findUser && <UserInfo user={findUser} />}\n      </article>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Todos } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todos[];\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todos) => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { FC, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [title, setTitle] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [isSelectedUserError, setIsSelectedUserError] = useState(false);\n\n  const resetForm = () => {\n    setTitle('');\n    setSelectedUser(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsTitleError(!title);\n    setIsSelectedUserError(!selectedUser);\n\n    if (!title || !selectedUser) {\n      return;\n    }\n\n    const newTodo = {\n      id: Math.max(...todos.map(todo => todo.id)) + 1,\n      title,\n      completed: false,\n      userId: selectedUser,\n    };\n\n    setTodos(currentTodo => [...currentTodo, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"TitleForm\">Title:</label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"TitleForm\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={event => {\n              setTitle(event.target.value);\n              setIsTitleError(false);\n            }}\n          />\n          {isTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"Select\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"Select\"\n            value={selectedUser}\n            onChange={event => {\n              setSelectedUser(+event.target.value);\n              setIsSelectedUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {isSelectedUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}